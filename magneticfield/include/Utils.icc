namespace magneticfield {

template<class T>
size_t getFirstIndex(const T& value) {
    return static_cast<size_t>(value);
}

inline G4double extractValue(const G4double array[], const Value1D& value)
{
    const auto begin = getFirstIndex(value);
    return array[begin];
}

inline G4double extractValue2(const G4double array[], const Value1D& value)
{
    return sqr(extractValue(array, value));
}

inline G4double extractValue(const G4double array[], const Value3D &value)
{
    return sqrt(extractValue2(array, value));
}

inline G4double extractValue2(const G4double array[], const Value3D& value)
{
    const auto begin = getFirstIndex(value);
    return sqr(array[begin]) + sqr(array[begin+1]) + sqr(array[begin+2]);
}

inline G4ThreeVector makeVector(const G4double array[], const Value3D& value)
{
    const auto begin = getFirstIndex(value);
    return G4ThreeVector(array[begin], array[begin + 1], array[begin + 2]);
}

inline void copyValue(G4double dest[], const G4double src[], const Value1D& value)
{
    const auto begin = getFirstIndex(value);
    dest[begin] = src[begin];
}

inline void copyValue(G4double dest[], const G4double src[], const Value3D& value)
{
    const auto begin = getFirstIndex(value);
    for (auto i = begin; i < begin + 3; ++i) {
        dest[i] = src[i];
    }
}

} // magneticfield
